
                           ==sexyplatypussies.com==

                              0x00 IOLI-crackme

|=-----------------------------------------------------------------------=|
|=---------------=[                                      ]=--------------=|
|=---------------=[          Crackme 0x04                ]=--------------=|
|=---------------=[                                      ]=--------------=|
|=-----------------------------------------------------------------------=|


    -----------
---[   INDEX   ]---
    -----------

 1 - English Version

 2 - Versión en galego

 3 - Versión en castellano

 4 - Referencias
 
    -----------------------
---[ 1 - English Version   ]---
    ----------------------- 

Link to the crackme: http://pof.eslack.org/tmp/IOLI-crackme.tar.gz

Let's go with crackme0x04 =)

$ ./crackme0x04
IOLI Crackme Level 0x04
Password: Hello!
Password Incorrect!

The first thing I did was going straight to radare2 to list the 
instructions of the main function.

$ r2 crackme0x04

[0x080483d0]> aaa ; this command analyzes the binary
[0x080483d0]> pdf@sym.main ; this means print disassembly function main

/ (fcn) sym.main 92
|          ; var int local_30     @ ebp-0x78
|          ; DATA XREF from 0x080483e7 (entry0)
|          ;-- main:
|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax
|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048534    c70424778604.  mov dword [esp], str.Password: ; [0x8048677:4]=0x73736150  LEA str.Password: ; "Password: " @ 0x8048677
|          0x0804853b    e854feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()
|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()
|          0x0804855e    b800000000     mov eax, 0
|          0x08048563    c9             leave
\          0x08048564    c3             ret


There is nothing surprising about the main. First of all we have the 
instructions that prepares the stack frame for the function:

|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax


Basically it saves the old value of the register EBP, then points EBP 
toward the former head of the stack and substracts some number to ESP 
(the stack grows toward the lower memory directions) in order to create 
a gap between EBP and ESP. In this space is where the main function 
stores its local data, so the compiler makes sure that the space will 
be enough to fit all the data.

Next, the program prints some strings.

|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()

Looking at this we can learn here how the compiler passes arguments to 
the functions. What it does is to store the direction of memory 
(0x804865e) of the string "IOLI Crackme Level 0x04." in the end of its 
stack frame. When the program goes inside printf the stack will look 
like this:


        ----------------  higher memory directions
        '               '
        '               '
        '    Main's     '
        '  Stack Frame  '
        '               '
        '               '
        '---------------'
        '   08          '
        '---------------'
        '   04          '
        '---------------'
        '   86          '
        '---------------'
ebp --> '   5e          ' little endian
        '---------------'
        '               '
        '               '
        '    Printf's   '
        '  Stack Frame  '
        '               '
        '               '
esp --> '               '
        '---------------' lower memory directions

So, printf, in order to access its parameter should use the EBP 
register. If it were more than one parameter it would work in the same 
fashion, the parameters would be one aside the other and printf would 
access them using EBP + offset. For example, if above the 0x0x804865e 
were another argument, it could reference it with EBP + 4.

After the two printf we can see how the program reads input from the 
stdin, calling scanf:

|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()

It passes two arguments to scanf, first the direction of memory inside 
the stack where the pointer that will point to the string lives 
[ebp-local_30], as a second argument we can see the format ("%s") of 
how scanf() must treat the input.

Now, the program pass our string to a function called check...shall 
we take a look inside?

|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()


[0x080483d0]> pdf@sym.check
/ (fcn) sym.check 133
|          ; arg int arg_2        @ ebp+0x8
|          ; arg int arg_3_3      @ ebp+0xf
|          ; arg int arg_4_3      @ ebp+0x13
|          ; var int local_0_1    @ ebp-0x1
|          ; var int local_1      @ ebp-0x4
|          ; var int local_2      @ ebp-0x8
|          ; var int local_3      @ ebp-0xc
|          ; var int local_3_1    @ ebp-0xd
|          ; CALL XREF from 0x08048559 (sym.main)
|          0x08048484    55             push ebp
|          0x08048485    89e5           mov ebp, esp
|          0x08048487    83ec28         sub esp, 0x28
|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0
|          ; JMP XREF from 0x080484f9 (sym.check)
|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()
|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256
|    | ,=< 0x080484a6    7353           jae 0x80484fb                 
|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx
|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()
|    |||   0x080484e8    c70424000000.  mov dword [esp], 0
|    |||   0x080484ef    e8c0feffff     call sym.imp.exit              ;sym.imp.exit()
|    ||    ; JMP XREF from 0x080484da (sym.check)
|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498                 
|      |   ; JMP XREF from 0x080484a6 (sym.check)
|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048507    c9             leave
\          0x08048508    c3             ret

The first thing that stands out is the next printf:

|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()

If we look at the code, in order to get here we must pass this compare 
instrucction:

|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf

So, whatever it is [ebp-local_2] it must be equal to 0xf at some point 
in order to solve the crackme.

Now, getting back to the beginning we will look thoroughly at what the 
program really does.

First, it stores two 0 in [ebp-local_2] and [ebp-local_3]. At this 
point we don't know what this means but usually when a variable starts 
at a 0 is to count something.

|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0

Next, the program wants to know the lenght of our string:

|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()

Now the program compares the lenght with 0 (notice that strlen returns 
its value inside EAX)

|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256


Remember that [ebp-local_3] = 0 so, what happens if [ebp-local_3] >= 
len(our_string)

|    | ,=< 0x080484a6    7353           jae 0x80484fb

The program jumps, where?

|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()

So if [ebp-local_3] > len(our_string) we are doomed. If we look through 
the code looking for [ebp-local_3] we see this:

|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498

The value inside [ebp-local_3] is incremented by one and then the program 
jumps back to where it compares [ebp-local_3] with len(our_string) so 
at this points it seems the program does something like this:

while [ebp-local_3] <= len(our_string) {
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

It appears that the key is to know what happens with [ebp-local_2].


Before the if [ebp-local_2] == 0xf the program does

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx


We know that the function check gets as a argument a pointer to our 
string. This pointer lives in [ebp+arg2] so what it is really doing in 
these two first instructions 

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]

It is adding the value of [ebp-local_3] to the pointer. We already saw 
like [ebp_local_3] is increased by one each time until it is >= 
len(our_string) so this appears to be a way of going through the string 
using pointer arithmetic.

The next two instructions take a byte from our string at pointer + 
[ebp-local_3]

|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al

We see how the programs calls sscanf passing it our one byte 
string, the format "%d" and a pointer. So what does sscanf? it parsers 
whatever you feed it until it finds the null byte trying to read a 
value compatible with a format (in this case "%d"). In this case what 
it really does is read a number ("%d") from our one byte string. 

|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()

Now, it adds that number and accumulate it in [ebp-local_2], so that's 
what happens with [ebp-local_2].

|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

At this point we have a pretty good idea of what the program does

ebp-local_3 = 0;
ebp_local_2 = 0;
while [ebp-local_3] <= len(our_string) {
    
    ebp_local_2 += int(our_string[ebp-local_3])
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

It's time to check

./crackme0x04
IOLI Crackme Level 0x04
Password: 111111111111111
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 5551
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 333331
Password OK!

    -------------------------
---[ 2 - Versión en galego   ]---
    -------------------------

Link ó crackme: http://pof.eslack.org/tmp/IOLI-crackme.tar.gz

É a quenda do crackme0x04 =)

$ ./crackme0x04
IOLI Crackme Level 0x04
Password: Hello!
Password Incorrect!

O primeiro paso foi abrir rarada2 e desamblar a función main do binario.

$ r2 crackme0x04

[0x080483d0]> aaa ; this command analyzes the binary
[0x080483d0]> pdf@sym.main ; this means print disassembly function main

/ (fcn) sym.main 92
|          ; var int local_30     @ ebp-0x78
|          ; DATA XREF from 0x080483e7 (entry0)
|          ;-- main:
|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax
|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048534    c70424778604.  mov dword [esp], str.Password: ; [0x8048677:4]=0x73736150  LEA str.Password: ; "Password: " @ 0x8048677
|          0x0804853b    e854feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()
|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()
|          0x0804855e    b800000000     mov eax, 0
|          0x08048563    c9             leave
\          0x08048564    c3             ret

O primeiro que vemos son as instruccións que preparan o stack frame para
a función.

|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax

Básicamente o que ocorre aquí é que o programa garda o antigo valor
do rexistro EBP, sinala EBP cara a antiga cabeza do stack e resta un 
valor ó rexistro ESP (o stack crece cara ás direccións de memoria máis
baixas) co obxetivo de crear espazo entre EBP e ESP.

Éste é o espazo no que a función main vai almacenar a súas variables
locais polo que o compilador asegúrase de quitarlle o valor suficiente
a ESP para que haxa lugar para todo.

A continuación o programa mostra algunhas cadeas.

|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()

Botando unha ollada á maneira na que o programa chama a función printf podemos ver
como o compilador lle envía os argumentos ás funcións. Vemos como 
almacena a dirección de memoria (0x804865e) da cadea "IOLI 
Crackme Level 0x04." ó final do seu stack frame e a continuación chama
a función printf.

Cando o programa estea dentro da función printf o stack frame terá un aspecto
parecido ó seguinte:

        ----------------  dir. memoria altas
        '               '
        '               '
        '    Main's     '
        '  Stack Frame  '
        '               '
        '               '
        '---------------'
        '   08          '
        '---------------'
        '   04          '
        '---------------'
        '   86          '
        '---------------'
ebp --> '   5e          ' little endian
        '---------------'
        '               '
        '               '
        '    Printf's   '
        '  Stack Frame  '
        '               '
        '               '
esp --> '               '
        '---------------' dir. memoria baixas
        
Entón printf accede os seus parámetros a través do rexistro EBP.
Se printf recibira máis dun parámetro, estes estarían de forma
seguida dende EBP ata direccións de memoria máis altas.

Por exemplo se ademais da dirección de memoria 0x0804865e houbera
outro argumento, podería acceder a el a través de [EBP + 4].

Despois dos dous printf vemos como o programa fai unha lectura na
entrada estándar chamando a función scanf:

|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()

Scanf recibe dous argumentos, o punteiro no que se vai a almacenar
o resultado da lectura da entrada estándar e o formato no cal se debe
interpretar a lectura ("%s").

A continuación o programa executa unha función chamada check, a cal
recibe a nosa cadea como parámetro.

|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()

Vexamos que hai dentro da función check.

[0x080483d0]> pdf@sym.check
/ (fcn) sym.check 133
|          ; arg int arg_2        @ ebp+0x8
|          ; arg int arg_3_3      @ ebp+0xf
|          ; arg int arg_4_3      @ ebp+0x13
|          ; var int local_0_1    @ ebp-0x1
|          ; var int local_1      @ ebp-0x4
|          ; var int local_2      @ ebp-0x8
|          ; var int local_3      @ ebp-0xc
|          ; var int local_3_1    @ ebp-0xd
|          ; CALL XREF from 0x08048559 (sym.main)
|          0x08048484    55             push ebp
|          0x08048485    89e5           mov ebp, esp
|          0x08048487    83ec28         sub esp, 0x28
|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0
|          ; JMP XREF from 0x080484f9 (sym.check)
|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()
|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256
|    | ,=< 0x080484a6    7353           jae 0x80484fb                 
|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx
|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()
|    |||   0x080484e8    c70424000000.  mov dword [esp], 0
|    |||   0x080484ef    e8c0feffff     call sym.imp.exit              ;sym.imp.exit()
|    ||    ; JMP XREF from 0x080484da (sym.check)
|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498                 
|      |   ; JMP XREF from 0x080484a6 (sym.check)
|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048507    c9             leave
\          0x08048508    c3             ret

O primero que chama a atención é o seguinte:

|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()

Vemos que para chegar o printf e resolver así o problema temos que 
superar a seguinte comparación:

|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf

Polo tanto, sexa o que sexa [ebp-local_2] nalgún momento ten que ser
igual a 0xf para resolver o crackme.

Volvamos ó comezo e examinemos minuciosamente o que fai o programa.

Primeiro garda dous 0 en [ebp-local_2] e [ebp-local_3]. Non sabemos a
razón pero é típico que cando unha variable se inicializa a 0 se empregue para contar algunha cousa.

|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0

O seguinte que fai o programa é obter a lonxitude da cadea:

|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()

Compara o tamaño da cadea con 0 (fíxate que a función strlen garda
o valor de retorno no rexistro EAX)

|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256

Lembra que [ebp-local_3] = 0, ¿que acontence cando [ebp-local_3] >= 
len(our_string?

|    | ,=< 0x080484a6    7353           jae 0x80484fb

O programa salta a seguinte instrucción:

|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()

Polo tanto se if [ebp-local_3] >= len(our_string), perderemos.
Mirando outras áreas do código na procura de [ebp-local_3] atopamos
o seguinte:

|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498

O valor gardado en [ebp-local_3] vaise incrementando de un en un e logo
o programa salta a antes da comparación entre [ebp-local_3] e a 
lonxitude da cadea.

Neste punto o programa parece que fai o seguinte:

while [ebp-local_3] <= len(our_string) {
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Ó parecer a clave é achar o que sucede con [ebp-local_2].

Antes da comparación if [ebp-local_2] == 0xf temos as seguintes
instruccións:

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

Sabemos que a función check recibe o punteiro da nosa cadea e que este
está gardado en [ebp+arg2], entón... ¿que é o que acontece nestas duas
instruccións?

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]

Estase sumando o valor de [ebp-local_3] o punteiro. Xa vimos como
[ebp-local_3] é incrementado de un en un ata que é >= len(our_string) 
polo que ten toda pinta de ser unha maneira de percorrer a cadea facendo 
uso da aritmética de punterios.

As seguintes dúas instruccións recollen un byte procedente da nosa
cadea en punteiro + [ebp-local_3]

|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al

Agora vemos como o programa chama á función sscanf e lle pasa o byte
que colleu procedente da nosa cadea, o formato "%d" e un punteiro.
¿Que fai sscanf? Parsea a cadea que recibe como parámetro 
procurando valores compatibles co formato que lle pasamos, neste caso
"%d" e o almacena en *punteiro. Polo que básicamente o que está a facer
neste caso é tratar de ler un decimal a partir do byte procedente
da nosa cadea.

|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()

Podemos ver como acumula o número resultante da chamada a sscanf co 
valor gardado en [ebp-local_2].

|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

Neste momento temos unha boa idea do que fai o programa:

ebp-local_3 = 0;
ebp_local_2 = 0;
while [ebp-local_3] <= len(our_string) {
    
    ebp_local_2 += int(our_string[ebp-local_3])
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Vemos se estamos no certo!

./crackme0x04
IOLI Crackme Level 0x04
Password: 111111111111111
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 5551
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 333331
Password OK!

    -----------------------------
---[ 3 - Versión en castellano   ]---
    -----------------------------

Link al crackme: http://pof.eslack.org/tmp/IOLI-crackme.tar.gz

Es el turno del crackme0x04 =)

$ ./crackme0x04
IOLI Crackme Level 0x04
Password: Hello!
Password Incorrect!

El primer paso ha sido abrir radare2 y desamblar la función main del
binario.

$ r2 crackme0x04

[0x080483d0]> aaa ; this command analyzes the binary
[0x080483d0]> pdf@sym.main ; this means print disassembly function main

/ (fcn) sym.main 92
|          ; var int local_30     @ ebp-0x78
|          ; DATA XREF from 0x080483e7 (entry0)
|          ;-- main:
|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax
|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048534    c70424778604.  mov dword [esp], str.Password: ; [0x8048677:4]=0x73736150  LEA str.Password: ; "Password: " @ 0x8048677
|          0x0804853b    e854feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()
|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()
|          0x0804855e    b800000000     mov eax, 0
|          0x08048563    c9             leave
\          0x08048564    c3             ret

De entrada podemos ver las instrucciones que preparan el stack frame 
para la función main.

|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax

Básicamente lo que sucede aquí es que el programa guarda el antiguo 
valor del registro EBP, apunta EBP hacia la antigua cabeza del stack y 
resta un valor al registro ESP (el stack crece hacia las direcciones de 
memoria más bajas) con el objetivo de crear espacio entre EBP y ESP.

Éste es el espacio en el que la función main almacena sus variables 
locales por lo que el compilador se asegura de restarle a ESP un número 
suficiente para que haya sitio para todo.

A continuación el programa muestra algunas cadenas.

|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()

Echando un vistazo a como el programa llama a la función printf podemos 
averiguar como el compilador pasa los argumentos a las funciones. Vemos 
como almacena la dirección de memoria (0x804865e) de la cadena "IOLI 
Crackme Level 0x04." al final de su stack frame y a continuación llama
a printf.  

Cuando el programa esté dentro del printf el stack frame tendrá un 
aspecto parecido a este:


        ----------------  dir. memoria altas
        '               '
        '               '
        '    Main's     '
        '  Stack Frame  '
        '               '
        '               '
        '---------------'
        '   08          '
        '---------------'
        '   04          '
        '---------------'
        '   86          '
        '---------------'
ebp --> '   5e          ' little endian
        '---------------'
        '               '
        '               '
        '    Printf's   '
        '  Stack Frame  '
        '               '
        '               '
esp --> '               '
        '---------------' dir. memoria bajas
        
Así que printf accede a sus parámetros a través del registro EBP. Si 
printf hubiera recibido más de un parámetro estos estarían de forma
consecutiva desde EBP hacia dirección más altas. Por ejemplo si además
de la dirección de memoria 0x0804865e tuviera otro argumento podría
acceder a él a través de [EBP + 4].

Después de los dos printf vemos como el programa lee la entrada estandar
con una llamada a la función scanf:

|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()

Scanf recibe dos argumentos, el puntero en el que se va a almacenar el 
resultado de leer la entrada estandar y el formáto en el cual debe 
interpretar la lectura ("%s")

A continuación el programa ejecuta una función llamada check, la cual
recibe nuestra cadena como parámetro.

|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()

Veámos que hay dentro de la función check.

[0x080483d0]> pdf@sym.check
/ (fcn) sym.check 133
|          ; arg int arg_2        @ ebp+0x8
|          ; arg int arg_3_3      @ ebp+0xf
|          ; arg int arg_4_3      @ ebp+0x13
|          ; var int local_0_1    @ ebp-0x1
|          ; var int local_1      @ ebp-0x4
|          ; var int local_2      @ ebp-0x8
|          ; var int local_3      @ ebp-0xc
|          ; var int local_3_1    @ ebp-0xd
|          ; CALL XREF from 0x08048559 (sym.main)
|          0x08048484    55             push ebp
|          0x08048485    89e5           mov ebp, esp
|          0x08048487    83ec28         sub esp, 0x28
|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0
|          ; JMP XREF from 0x080484f9 (sym.check)
|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()
|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256
|    | ,=< 0x080484a6    7353           jae 0x80484fb                 
|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx
|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()
|    |||   0x080484e8    c70424000000.  mov dword [esp], 0
|    |||   0x080484ef    e8c0feffff     call sym.imp.exit              ;sym.imp.exit()
|    ||    ; JMP XREF from 0x080484da (sym.check)
|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498                 
|      |   ; JMP XREF from 0x080484a6 (sym.check)
|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048507    c9             leave
\          0x08048508    c3             ret

Lo primero que llama la atención es esta llamada a printf:

|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()

Examinando el código vemos que para llegar a ese printf y resolver el
problema debemos pasar esta comparación:

|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf

Por lo que, sea lo que sea lo que haya en [ebp-local_2] tiene que ser
igual a 0xf en algún momento para resolver el crackme.

Volvemos al principio para examinar minuciosamente que es lo que hace
el programa.

Primero almacena dos 0 en [ebp-local_2] y [ebp-local_3]. No sabemos
para que pero es típico que cuando una variable se inicializa a 0
vaya a ser utilizada para contar algo.

|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0

Lo siguiente que hace el programa es obtener la longitud de la cadena:

|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()

Compara el tamaño de la cadena con 0 (fíjate que la función strlen 
almacena el valor de retorno en el registro EAX)

|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256

Acuérdate que [ebp-local_3] = 0, así que qué sucede si
if [ebp-local_3] >= len(our_string)

|    | ,=< 0x080484a6    7353           jae 0x80484fb

El programa salta a la siguiente instrucción:

|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()

Por lo que si if [ebp-local_3] >= len(our_string) hemos perdido.
Buscando otras zonas del código en las que [ebp-local_3] aparece vemos
esto

|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498

El valor almacenado en [ebp-local_3] es incrementado uno a uno y luego
el programa salta a antes de la comparación entre [ebp-local_3] y
la longitud de la cadena.

En este punto el programa parece que hace algo parecido a lo siguiente:

while [ebp-local_3] <= len(our_string) {
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Parece que la clave es averiguar que sucede con [ebp-local_2].

Antes de la comparación if [ebp-local_2] == 0xf aparecen las siguientes
instrucciones:

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

Sabemos que la función recibe un puntero a nuestra cadena y que eśte
está almacenado en [ebp+arg2], entonces, qué es lo que está pasando
realmente en las siguientes dos instrucciones?

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]

Se está sumando el valor de [ebp-local_3] al puntero. Ya hemos visto
como [ebp-local_3] es incrementado uno a uno hasta que es
>= len(our_string) por lo que esto parece una forma de recorrer la 
cadena utilizando aritmética de punteros.

Las siguientes dos instrucciones cogen un byte de nuestra cadena en
puntero + [ebp-local_3]

|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al

Ahora vemos como el programa llama a la función sscanf y le pasa
el byte que ha extraído de nuestra cadena, el formato "%d" y un puntero.
¿Qué hace sscanf? Parsea las cadena que recibe como parámetro buscando
valores compatibles con el formato introducido, en este caso "%d" y lo
almacena en *puntero. Por lo que básicamente lo que hace en esta caso
es tratar de leer un decimal a partir del byte procedente de nuestra 
string. 

|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()

A continuación podemos observar como acumula el número resultante de sscanf
con el valor almacenado en [ebp-local_2].

|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

En este momento tenemos una buena idea de lo que el programa hace

ebp-local_3 = 0;
ebp_local_2 = 0;
while [ebp-local_3] <= len(our_string) {
    
    ebp_local_2 += int(our_string[ebp-local_3])
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Comprobamos que estamos en lo correcto!

./crackme0x04
IOLI Crackme Level 0x04
Password: 111111111111111
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 5551
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 333331
Password OK!

