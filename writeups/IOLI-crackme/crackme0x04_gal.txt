
                           ==sexyplatypussies.com==

                              0x00 IOLI-crackme

|=-----------------------------------------------------------------------=|
|=---------------=[                                      ]=--------------=|
|=---------------=[          Crackme 0x04                ]=--------------=|
|=---------------=[                                      ]=--------------=|
|=-----------------------------------------------------------------------=|

É a quenda do crackme0x04 =)

$ ./crackme0x04
IOLI Crackme Level 0x04
Password: Hello!
Password Incorrect!

O primeiro paso foi abrir rarada2 e desamblar a función main do binario.

$ r2 crackme0x04

[0x080483d0]> aaa ; this command analyzes the binary
[0x080483d0]> pdf@sym.main ; this means print disassembly function main

/ (fcn) sym.main 92
|          ; var int local_30     @ ebp-0x78
|          ; DATA XREF from 0x080483e7 (entry0)
|          ;-- main:
|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax
|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048534    c70424778604.  mov dword [esp], str.Password: ; [0x8048677:4]=0x73736150  LEA str.Password: ; "Password: " @ 0x8048677
|          0x0804853b    e854feffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()
|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()
|          0x0804855e    b800000000     mov eax, 0
|          0x08048563    c9             leave
\          0x08048564    c3             ret

O primeiro que vemos son as instruccións que preparan o stack frame para
a función.

|          0x08048509    55             push ebp
|          0x0804850a    89e5           mov ebp, esp
|          0x0804850c    81ec88000000   sub esp, 0x88
|          0x08048512    83e4f0         and esp, 0xfffffff0
|          0x08048515    b800000000     mov eax, 0
|          0x0804851a    83c00f         add eax, 0xf
|          0x0804851d    83c00f         add eax, 0xf
|          0x08048520    c1e804         shr eax, 4
|          0x08048523    c1e004         shl eax, 4
|          0x08048526    29c4           sub esp, eax

Básicamente o que ocorre aquí é que o programa garda o antigo valor
do rexistro EBP, sinala EBP cara a antiga cabeza do stack e resta un 
valor ó rexistro ESP (o stack crece cara ás direccións de memoria máis
baixas) co obxetivo de crear espazo entre EBP e ESP.

Éste é o espazo no que a función main vai almacenar a súas variables
locais polo que o compilador asegúrase de quitarlle o valor suficiente
a ESP para que haxa lugar para todo.

A continuación o programa mostra algunhas cadeas.

|          0x08048528    c704245e8604.  mov dword [esp], str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49  LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
|          0x0804852f    e860feffff     call sym.imp.printf            ;sym.imp.printf()

Botando unha ollada á maneira na que o programa chama a función printf podemos ver
como o compilador lle envía os argumentos ás funcións. Vemos como 
almacena a dirección de memoria (0x804865e) da cadea "IOLI 
Crackme Level 0x04." ó final do seu stack frame e a continuación chama
a función printf.

Cando o programa estea dentro da función printf o stack frame terá un aspecto
parecido ó seguinte:

        ----------------  dir. memoria altas
        '               '
        '               '
        '    Main's     '
        '  Stack Frame  '
        '               '
        '               '
        '---------------'
        '   08          '
        '---------------'
        '   04          '
        '---------------'
        '   86          '
        '---------------'
ebp --> '   5e          ' little endian
        '---------------'
        '               '
        '               '
        '    Printf's   '
        '  Stack Frame  '
        '               '
        '               '
esp --> '               '
        '---------------' dir. memoria baixas
        
Entón printf accede os seus parámetros a través do rexistro EBP.
Se printf recibira máis dun parámetro, estes estarían de forma
seguida dende EBP ata direccións de memoria máis altas.

Por exemplo se ademais da dirección de memoria 0x0804865e houbera
outro argumento, podería acceder a el a través de [EBP + 4].

Despois dos dous printf vemos como o programa fai unha lectura na
entrada estándar chamando a función scanf:

|          0x08048540    8d4588         lea eax, [ebp-local_30]
|          0x08048543    89442404       mov dword [esp + 4], eax
|          0x08048547    c70424828604.  mov dword [esp], 0x8048682     ; [0x8048682:4]=0x7325  ; "%s" @ 0x8048682
|          0x0804854e    e821feffff     call sym.imp.scanf             ;sym.imp.scanf()

Scanf recibe dous argumentos, o punteiro no que se vai a almacenar
o resultado da lectura da entrada estándar e o formato no cal se debe
interpretar a lectura ("%s").

A continuación o programa executa unha función chamada check, a cal
recibe a nosa cadea como parámetro.

|          0x08048553    8d4588         lea eax, [ebp-local_30]
|          0x08048556    890424         mov dword [esp], eax
|          0x08048559    e826ffffff     call sym.check                 ;sym.check()

Vexamos que hai dentro da función check.

[0x080483d0]> pdf@sym.check
/ (fcn) sym.check 133
|          ; arg int arg_2        @ ebp+0x8
|          ; arg int arg_3_3      @ ebp+0xf
|          ; arg int arg_4_3      @ ebp+0x13
|          ; var int local_0_1    @ ebp-0x1
|          ; var int local_1      @ ebp-0x4
|          ; var int local_2      @ ebp-0x8
|          ; var int local_3      @ ebp-0xc
|          ; var int local_3_1    @ ebp-0xd
|          ; CALL XREF from 0x08048559 (sym.main)
|          0x08048484    55             push ebp
|          0x08048485    89e5           mov ebp, esp
|          0x08048487    83ec28         sub esp, 0x28
|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0
|          ; JMP XREF from 0x080484f9 (sym.check)
|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()
|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256
|    | ,=< 0x080484a6    7353           jae 0x80484fb                 
|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx
|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()
|    |||   0x080484e8    c70424000000.  mov dword [esp], 0
|    |||   0x080484ef    e8c0feffff     call sym.imp.exit              ;sym.imp.exit()
|    ||    ; JMP XREF from 0x080484da (sym.check)
|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498                 
|      |   ; JMP XREF from 0x080484a6 (sym.check)
|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()
|          0x08048507    c9             leave
\          0x08048508    c3             ret

O primero que chama a atención é o seguinte:

|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf            ;sym.imp.printf()

Vemos que para chegar o printf e resolver así o problema temos que 
superar a seguinte comparación:

|    | |   0x080484d6    837df80f       cmp dword [ebp-local_2], 0xf   ; [0xf:4]=0x3000200 
|    |,==< 0x080484da    7518           jne 0x80484f4                 
|    |||   0x080484dc    c704243b8604.  mov dword [esp], str.Password_OK__n ; [0x804863b:4]=0x73736150  LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
|    |||   0x080484e3    e8acfeffff     call sym.imp.printf

Polo tanto, sexa o que sexa [ebp-local_2] nalgún momento ten que ser
igual a 0xf para resolver o crackme.

Volvamos ó comezo e examinemos minuciosamente o que fai o programa.

Primeiro garda dous 0 en [ebp-local_2] e [ebp-local_3]. Non sabemos a
razón pero é típico que cando unha variable se inicializa a 0 se empregue para contar algunha cousa.

|          0x0804848a    c745f8000000.  mov dword [ebp-local_2], 0
|          0x08048491    c745f4000000.  mov dword [ebp-local_3], 0

O seguinte que fai o programa é obter a lonxitude da cadea:

|    .---> 0x08048498    8b4508         mov eax, dword [ebp+arg_2]     ; [0x8:4]=0
|    |     0x0804849b    890424         mov dword [esp], eax
|    |     0x0804849e    e8e1feffff     call sym.imp.strlen            ;sym.imp.strlen()

Compara o tamaño da cadea con 0 (fíxate que a función strlen garda
o valor de retorno no rexistro EAX)

|    |     0x080484a3    3945f4         cmp dword [ebp-local_3], eax   ; [0x13:4]=256

Lembra que [ebp-local_3] = 0, ¿que acontence cando [ebp-local_3] >= 
len(our_string?

|    | ,=< 0x080484a6    7353           jae 0x80484fb

O programa salta a seguinte instrucción:

|      `-> 0x080484fb    c70424498604.  mov dword [esp], str.Password_Incorrect__n ; [0x8048649:4]=0x73736150  LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
|          0x08048502    e88dfeffff     call sym.imp.printf            ;sym.imp.printf()

Polo tanto se if [ebp-local_3] >= len(our_string), perderemos.
Mirando outras áreas do código na procura de [ebp-local_3] atopamos
o seguinte:

|    |`--> 0x080484f4    8d45f4         lea eax, [ebp-local_3]
|    | |   0x080484f7    ff00           inc dword [eax]
|    `===< 0x080484f9    eb9d           jmp 0x8048498

O valor gardado en [ebp-local_3] vaise incrementando de un en un e logo
o programa salta a antes da comparación entre [ebp-local_3] e a 
lonxitude da cadea.

Neste punto o programa parece que fai o seguinte:

while [ebp-local_3] <= len(our_string) {
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Ó parecer a clave é achar o que sucede con [ebp-local_2].

Antes da comparación if [ebp-local_2] == 0xf temos as seguintes
instruccións:

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]
|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al
|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()
|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

Sabemos que a función check recibe o punteiro da nosa cadea e que este
está gardado en [ebp+arg2], entón... ¿que é o que acontece nestas duas
instruccións?

|    | |   0x080484a8    8b45f4         mov eax, dword [ebp-local_3]
|    | |   0x080484ab    034508         add eax, dword [ebp+arg_2]

Estase sumando o valor de [ebp-local_3] o punteiro. Xa vimos como
[ebp-local_3] é incrementado de un en un ata que é >= len(our_string) 
polo que ten toda pinta de ser unha maneira de percorrer a cadea facendo 
uso da aritmética de punterios.

As seguintes dúas instruccións recollen un byte procedente da nosa
cadea en punteiro + [ebp-local_3]

|    | |   0x080484ae    0fb600         movzx eax, byte [eax]
|    | |   0x080484b1    8845f3         mov byte [ebp-local_3_1], al

Agora vemos como o programa chama á función sscanf e lle pasa o byte
que colleu procedente da nosa cadea, o formato "%d" e un punteiro.
¿Que fai sscanf? Parsea a cadea que recibe como parámetro 
procurando valores compatibles co formato que lle pasamos, neste caso
"%d" e o almacena en *punteiro. Polo que básicamente o que está a facer
neste caso é tratar de ler un decimal a partir do byte procedente
da nosa cadea.

|    | |   0x080484b4    8d45fc         lea eax, [ebp-local_1]
|    | |   0x080484b7    89442408       mov dword [esp + 8], eax
|    | |   0x080484bb    c74424043886.  mov dword [esp + 4], 0x8048638 ; [0x8048638:4]=0x50006425  ; "%d" @ 0x8048638
|    | |   0x080484c3    8d45f3         lea eax, [ebp-local_3_1]
|    | |   0x080484c6    890424         mov dword [esp], eax
|    | |   0x080484c9    e8d6feffff     call sym.imp.sscanf            ;sym.imp.sscanf()

Podemos ver como acumula o número resultante da chamada a sscanf co 
valor gardado en [ebp-local_2].

|    | |   0x080484ce    8b55fc         mov edx, dword [ebp-local_1]
|    | |   0x080484d1    8d45f8         lea eax, [ebp-local_2]
|    | |   0x080484d4    0110           add dword [eax], edx

Neste momento temos unha boa idea do que fai o programa:

ebp-local_3 = 0;
ebp_local_2 = 0;
while [ebp-local_3] <= len(our_string) {
    
    ebp_local_2 += int(our_string[ebp-local_3])
    
    if [ebp-local_2] == 0xf {
        print("Password OK")
        exit
    }

    ebp-local_3++
}

Vemos se estamos no certo!

./crackme0x04
IOLI Crackme Level 0x04
Password: 111111111111111
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 5551
Password OK!

./crackme0x04
IOLI Crackme Level 0x04
Password: 333331
Password OK!
